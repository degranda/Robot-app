{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","React","Component","CardList","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","setState","App","onRequestRoots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qWAkBeA,G,yLAZP,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,kBAAyDC,IAAI,WACrE,6BACI,4BAAKH,KAAKC,MAAMG,MAChB,2BAAIJ,KAAKC,MAAMI,a,GAPhBC,IAAMC,YCkBVC,E,uKAbP,OACI,yBAAKV,UAAU,oBACVE,KAAKC,MAAMQ,OAAOC,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,CAAMC,IAAKD,EAAMT,GACbA,GAAIS,EAAMT,GACVE,KAAMO,EAAMP,KACZC,MAAOM,EAAMN,gB,GARdC,IAAMC,WCOdM,G,MAVG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,6BACI,2BAAOC,KAAK,SACRC,YAAY,oBACZC,SAAUH,OCCXI,EARA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,SACtCrB,EAAMsB,WCoBJC,E,kDAtBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,8DAOIC,EAAOC,GACrB5B,KAAK6B,SAAS,CAAEH,UAAU,M,+BAI3B,OAAG1B,KAAKyB,MAAMC,SAEN,0DAGG1B,KAAKC,MAAMsB,a,GAlBFjB,IAAMC,WC0B3BuB,E,kLAGF9B,KAAKC,MAAM8B,mB,+BAGH,IAAD,EACoD/B,KAAKC,MAAxD+B,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBxB,EAD9B,EAC8BA,OAAQyB,EADtC,EACsCA,UACvCC,EAAiB1B,EAAO2B,QAAO,SAAAzB,GACnC,OAAOA,EAAMP,KAAKiC,cAAcC,SAASN,EAAYK,kBAGvD,OAAOH,EACN,0CAEG,6BACE,gCACE,2CACA,kBAAC,EAAD,CAAWnB,aAAckB,KAE3B,8BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAQ0B,Y,GAvBhB7B,IAAMC,WAgCTgC,eAhDS,SAAAd,GACtB,MAAO,CACLO,YAAaP,EAAMe,aAAaR,YAChCvB,OAAQgB,EAAMgB,cAAchC,OAC5ByB,UAAWT,EAAMgB,cAAcP,UAC/BP,MAAOF,EAAMgB,cAAcd,UAIJ,SAACe,GAC1B,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,ECrBU,CACrC1B,KCH+B,qBDI/B4B,QDmBmDD,EAAME,OAAOC,SAChEf,eAAgB,kBAAMW,GCjBS,SAACA,GAChCA,EAAS,CAAE1B,KCNuB,2BDOlC+B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE1B,KCRO,yBDQuB4B,QAASO,OAC/DC,OAAM,SAAAzB,GAAK,OAAIe,EAAS,CAAE1B,KCRI,wBDQyB4B,QAASjB,cDgDxDY,CAA6CT,GGzDtDuB,EAAsB,CACxBrB,YAAa,IAYXsB,EAAsB,CACxBpB,WAAW,EACXzB,OAAQ,GACRkB,MAAO,ICPL4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,MAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bf,OAAM,SAAAzB,GACL8C,QAAQ9C,MAAM,4CAA6CA,MClFjE,IAAMkD,EAASC,yBACTC,EAAcC,YAAgB,CAAExC,aFRV,WAA0C,IAAzCf,EAAwC,uDAAlC4B,EAAoB4B,EAAc,uDAAP,GAC1D,OAAOA,EAAOjE,MACV,IDT2B,qBCUvB,OAAOkE,OAAOC,OAAO,GAAI1D,EAAO,CAACO,YAAaiD,EAAOrC,UACzD,QACI,OAAOnB,IEGiCgB,cFOvB,WAA0C,IAAzChB,EAAwC,uDAAlC6B,EAAoB2B,EAAc,uDAAP,GAC3D,OAAOA,EAAOjE,MACV,IDtB8B,yBCuB1B,OAAOkE,OAAOC,OAAO,GAAI1D,EAAO,CAAES,WAAW,IACjD,IDvB8B,yBCwB1B,OAAOgD,OAAOC,OAAO,GAAI1D,EAAO,CAAEhB,OAAQwE,EAAOrC,QAASV,WAAW,IACzE,IDxB6B,wBCyBzB,OAAOgD,OAAOC,OAAO,GAAI1D,EAAO,CAAEE,MAAOsD,EAAOrC,QAASV,WAAW,IACxE,QACI,OAAOT,MEfb2D,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SDFnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,aAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIvC,OAGFvC,OAAOwC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,aAAN,sBAEPvC,IAgEV,SAAiCO,EAAOC,GAEtChB,MAAMe,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5BlD,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEnB,MAApBnD,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMvD,MAAK,SAAAmB,GACjCA,EAAaqC,aAAaxD,MAAK,WAC7BS,OAAOC,SAAS+C,eAKpB5C,EAAgBC,EAAOC,MAG1BX,OAAM,WACLqB,QAAQC,IACN,oEAvFAgC,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMvD,MAAK,WACjCyB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCpB/BE,K","file":"static/js/main.339c41ac.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nclass Card extends React.Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <img src={`https://robohash.org/${this.props.id}=?size=200x200`} alt=\"Robots\" />\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\n\nimport './CardList.css';\n\nimport Card from './Card';\n\n\nclass CardList extends React.Component {\n    render() {\n        return(\n            <div className=\"cards--container\">\n                {this.props.robots.map((robot) => (\n                    <Card key={robot.id} \n                        id={robot.id} \n                        name={robot.name} \n                        email={robot.email}/>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React from 'react';\n\nimport './SearchBox.css';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return( \n        <div>\n            <input type=\"search\" \n                placeholder=\"Search for Robots\"\n                onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react'; \n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflowY: 'scroll', height: '90vh' }}>\n            {props.children}\n        </div>\n    ); \n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n       if(this.state.hasError) {\n           return(\n               <h1>Oooops, that's not good :S</h1>\n           )\n       } else {\n           return this.props.children\n       }\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\nimport ErrorBoundry from './components/ErrorBoundry';\n\nimport { setSearchField, requestRobots } from './actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRoots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRoots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n\n    return isPending ?\n     <h1>Loading...</h1> :\n      (\n        <div>\n          <header>\n            <h1>RoboFriends</h1>  \n            <SearchBox searchChange={onSearchChange}/>\n          </header>\n          <main>\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robots={filteredRobots}/>\n              </ErrorBoundry>\n            </Scroll>\n          </main>\n        </div>\n      )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\n\n\nconst initialStateSearch =  {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default: \n            return state;\n    }\n}\n\nconst initialStateRobots =  {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED: \n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default: \n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\n\nimport App from './App';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}